#!/usr/bin/env bash


VERBOSE=true
DRY_RUN=false
INPUT='';
OUTPUT='';
CONFIG='';

PASSLOGFILE=''

usage () {
echo -e "
$0 [-h]|-i <v.mp4> [-o <v.mp4>][-c <c.yml>][-v]

    -h, --help     shows this test.
    -i, --input    name of input video file.
    -o, --output   prefix of output video file.
    -c, --config   yaml-config file.
    -v, --verbose  uses verbose mode. It tells about really actions.

";
}

configure () {
    local file_name="$1";
    if [[ -n "${file_name}" ]]; then
        eval_config "${file_name}";
    else
        eval_default_config;
    fi;
}

eval_default_config() {
    eval_config <<$0CONFIGURE

ffmpeg:
    bin: /usr/bin/ffmpeg
    threads: 0
    time: 10
profile:
    default:
        suffix: hd1
        video:
            width: 1280
            height:  720
            bitrate: 2000k
            preset: veryslow
            pass1:
                params: -weightp 2 -bf 3
            h264:
                profile: main
                level: 3.1
        audio:
            channels: 5.1
            bitrate: 320k
            volume: 4
            aac:
                profile: aac_he
$0CONFIGURE
}

eval_config() {
    local config="$@";
    local res=$(parse_config $config);
    #[[ "x${VERBOSE}" = "xtrue" ]] && echo -e $res | sed 's/; /;\n/gi';
    eval $res;
}

parse_config() {
    echo -e "$1";
    local prefix=$2
    local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
    sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
    awk -F$fs '{
        indent = length($1)/4; # indent size
        tail = toupper($2);
        vname[indent] = tail;
        for (i in vname) {
            if (i > indent) {
                delete vname[i]
            }
        }
        #if (length($3) > 0) {
            vn="'$prefix'";
            for (i=0; i<indent; i++) {
                vn=(vn)(vname[i])("_")
                vnn = vname[i+1]
                if (!(vn in varray)){
                    printf("declare -gA %sMAP; ", vn);
                }
                varray[vn] = 1
                if (!((vn,vnn) in varray)){
                    printf("%sMAP[%s]=1; ", vn, vnn);
                }
                varray[vn,vnn] = 1
            }
            printf("readonly %s%s=\"%s\"; ", vn, tail, $3);
        #}
    }'
}

get () {
    local string=$1
    for word in "${@:2}"; do
        string+="_${word}";
    done
    echo $(eval echo "\${${string^^}}");
}

profile () {
    echo $(get profile ${@});
}

profile_default () {
    local default=$1;
    local value=$(profile ${@:2});
    if [[ -z "${value}" ]] ; then
        echo "$default";
    else
        echo "${value}"
    fi;
}



# ------------------------------------------------------------
# Printing functions
# ------------------------------------------------------------

success () {
    echo -e "SUCCESS:${PROGNAME}: ${@}" 1>&2;
}

fail () {
    echo -e "FAIL:${PROGNAME}: ${@}" 1>&2;
}

warn () {
    echo -e "WARN:${PROGNAME}: ${@}" 1>&2;
}

error () {
    echo -e "ERROR:${PROGNAME}: ${@}" 1>&2;
}

verbose() {
    [[ "x${VERBOSE}" = "xtrue" ]] && echo -e "# ${@}" 1>&2;
}

notice() {
    echo -e "${@}" 1>&2;
}

show_usage(){
    usage;
    exit 0;
}

wrong_usage(){
    usage;
    error $'\n'"${@}"$'\n';
    exit 3;
}

assert_not_empty () {
    local file_name=$1;
    local message=$2;
    if [[ -z "${file_name}" ]] ; then
        wrong_usage "${message}";
    fi;
}

compute_if_empty (){
    local file_name=${1};
    if [[ -z "${file_name}" ]] ; then
        local initial_name=${2};
        local extention=${3};
        local suffix=${4};
        assert_not_empty "$initial_name" "empty base name";
        local base_name=${initial_name%.*};
        if [[ -z "${extention}" ]] ; then
            extention="${initial_name##*.}"
        fi;
        file_name="${base_name}-${suffix}.${extention}"
    fi;
    echo "${file_name}";
}

log_run (){
    verbose ":: ${@}";
    if [[ "x${DRY_RUN}" = "xfalse" ]]; then
        eval "${@}";
    fi;
}

parse_options (){

    local OPTIONS=$(getopt -o hi:o:c:vqd \
        --long 'help,input:,output:config:,verbose,quiet,dry-run' \
        -n "$0" -- "${@}");


    #set -- ${OPTIONS};

    while [[ -n ${OPTIONS} ]] ; do
        case ${1} in
            -h|--help)
                show_usage;
                shift;;
            -i|--input)
                case "${2}" in
                    '')
                        shift 1;;
                    *)
                        INPUT=${2};
                        readonly INPUT;
                        shift 2;;
                esac;;
            -o|--output)
                case "${2}" in
                    '')
                        shift 1;;
                    *)
                        OUTPUT=${2};
                        shift 2;;
                esac;;
            -c|--config)
                case "${2}" in
                    '')
                        shift 1;;
                    *)
                        CONFIG=${2};
                        shift 2;;
                esac;;
            -v|--verbose)
                VERBOSE='true';
                readonly VERBOSE;
                shift;;
            -d|--dry-run)
                DRY_RUN='true';
                readonly DRY_RUN;
                shift;;
            -q|--quiet)
                VERBOSE='false';
                readonly VERBOSE;
                shift;;
            '--'|'')
                break;;
            *) wrong_usage "Unknown parameter '${1}'.";;
        esac;
    done;
}

handle_video_options(){
    # DEFAULT_video_options_265
    #     -codec:v libx265
    #     -preset veryslow
    #     -b:v 500k
    #     -maxrate 500k
    #     -bufsize 1000k
    #     -vf scale=-1:720
    #
    #
    # DEFAULT_video_options_264
    #     -codec:v libx264
    #     -profile:v high
    #     -preset veryslow
    #     -b:v 500k
    #     -maxrate 500k
    #     -bufsize 1000k
    #     -vf scale=-1:720


    local name=$1;

    local codec_options="
        -codec:v libx264
        -profile:v $(profile $name video h264 profile)
        -level:v $(profile $name video h264 level)";

    local preset="$(profile $name video preset)";
    local bitrate="$(profile $name video bitrate)";
    local width="$(profile $name video width)";
    local height="$(profile $name video height)";

    local common_options="
        -preset ${preset}
        -b:v ${bitrate}
        -vf scale=${width}:${height}";

    local options="${codec_options} ${common_options}";
    verbose "handle_video_options() -> ${options}"
    echo ${options}
}

handle_audio_options(){
    # DEFAULT_audio_options
    #     -strict experimental
    #     -codec:a aac
    #     -b:a 320k
    #     -af "volume=4"


    local name=$1;

    local codec_options="
        -strict experimental
        -codec:a aac";

    local bitrate="$(profile $name audio bitrate)";
    local volume="$(profile $name audio volume)";


    local common_options="
        -b:a $bitrate
        -af volume=${volume}";

    local options="${codec_options} ${common_options}";
    verbose "handle_audio_options() -> ${options}"
    echo ${options}
}


handle_profile(){
    local name=$1;

    local suffix=$(profile_default 'norm' $name suffix);
    local passes=$(profile_default '1' $name passes);
    local format=$(profile_default 'mp4' $name format);
    local output=$(compute_if_empty \
        "${OUTPUT}" \
        "${INPUT}" \
        "${format}" \
        "$suffix");
    local log=$(compute_if_empty "${PASSLOGFILE}" \
        "${INPUT}" \
        "pass" \
        "$suffix");

    verbose "PROFILE ${name}; $suffix $format"

    local common_options="-t ${FFMPEG_TIME} -threads ${FFMPEG_THREADS}"
    local video_options=$(handle_video_options "$name");
    local audio_options=$(handle_audio_options "$name");

    for pass in $(seq 1 ${passes}); do
        local pass_options="";
        if [[ ${passes} > 1 ]]; then
            pass_options="-pass ${pass} -passlogfile  ${log}";
        fi;
        log_run ${FFMPEG_BIN} \
            ${common_options} \
            -i ${INPUT} \
            ${video_options} \
            ${pass_options} \
            ${audio_options} \
            -f ${format} -y ${output} ;
    done
}

main(){
    parse_options "${@}";
    configure "${CONFIG}";
    assert_not_empty "${INPUT}" 'empty input file (-i)';
    for profile in "${!PROFILE_MAP[@]}"; do
        handle_profile $profile
    done
}

main "${@}";

#
# ffmpeg -i inputfile.avi
# -codec:v libx264
# -profile:v main
# -preset slow -b:v 400k
# -maxrate 400k
# -bufsize 800k
# -vf scale=-1:480
# -threads 0 -codec:a
# libfdk_aac -b:a 128k output.mp4
#
# X="d"
# "d";
#







